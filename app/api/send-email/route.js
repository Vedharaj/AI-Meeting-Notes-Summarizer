import { NextResponse } from 'next/server';

export async function POST(request) {
  try {
    const { recipients, summary, subject } = await request.json();

    if (!recipients || !summary) {
      return NextResponse.json(
        { error: 'Recipients and summary are required' },
        { status: 400 }
      );
    }

    // Parse recipients (comma-separated emails)
    const emailList = recipients.split(',').map(email => email.trim()).filter(email => email);

    if (emailList.length === 0) {
      return NextResponse.json(
        { error: 'No valid email addresses provided' },
        { status: 400 }
      );
    }

    // Check if SendGrid API key is configured
    if (!process.env.SENDGRID_API_KEY) {
      return NextResponse.json(
        { error: 'Email service not configured. Please set SENDGRID_API_KEY in environment variables.' },
        { status: 500 }
      );
    }

    // Send emails using SendGrid
    const emailPromises = emailList.map(async (email) => {
      const sendgridResponse = await fetch('https://api.sendgrid.com/v3/mail/send', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${process.env.SENDGRID_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          personalizations: [
            {
              to: [{ email: email }],
              subject: subject || 'Meeting Summary from MeetingSum'
            }
          ],
          from: {
            email: process.env.FROM_EMAIL,
            name: 'MeetingSum AI'
          },
          content: [
            {
              type: 'text/plain',
              value: `Meeting Summary\n\n${summary}\n\nGenerated by MeetingSum AI on ${new Date().toLocaleString()}`
            },
            {
              type: 'text/html',
              value: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background-color: #ffffff;">
                  <div style="background: linear-gradient(135deg, #7c3aed 0%, #3b82f6 100%); padding: 30px; text-align: center;">
                    <h1 style="color: white; margin: 0; font-size: 28px;">ðŸ“‹ Meeting Summary</h1>
                    <p style="color: rgba(255,255,255,0.9); margin: 10px 0 0 0;">AI-Powered Meeting Notes Summarizer</p>
                  </div>
                  
                  <div style="padding: 30px;">
                    <div style="background-color: #f8fafc; padding: 25px; border-radius: 12px; border-left: 4px solid #7c3aed; margin: 20px 0;">
                      ${summary}
                    </div>
                    
                    <div style="margin-top: 30px; padding: 20px; background-color: #f1f5f9; border-radius: 8px; text-align: center;">
                      <p style="margin: 0; color: #64748b; font-size: 14px;">
                        This summary was generated by <strong>MeetingSum AI</strong> using advanced language models.
                      </p>
                      <p style="margin: 10px 0 0 0; color: #64748b; font-size: 12px;">
                        Generated on: ${new Date().toLocaleString()}
                      </p>
                    </div>
                  </div>
                  
                  <div style="background-color: #f8fafc; padding: 20px; text-align: center; border-top: 1px solid #e2e8f0;">
                    <p style="margin: 0; color: #64748b; font-size: 12px;">
                      Â© 2024 MeetingSum AI. All rights reserved.
                    </p>
                  </div>
                </div>
              `
            }
          ]
        }),
      });

      if (!sendgridResponse.ok) {
        const errorData = await sendgridResponse.text();
        throw new Error(`SendGrid API error: ${sendgridResponse.status} ${sendgridResponse.statusText} - ${errorData}`);
      }

      // SendGrid returns empty body on success, so we create our own response
      const responseData = await sendgridResponse.text();
      if (responseData) {
        try {
          return JSON.parse(responseData);
        } catch {
          // If response is not valid JSON, return success response
          return { success: true, message: 'Email sent successfully' };
        }
      } else {
        // Empty response means success
        return { success: true, message: 'Email sent successfully' };
      }
    });

    const results = await Promise.allSettled(emailPromises);
    
    // Check results
    const successful = results.filter(result => result.status === 'fulfilled').length;
    const failed = results.filter(result => result.status === 'rejected').length;

    if (failed > 0) {
      console.error('Some emails failed to send:', results.filter(result => result.status === 'rejected'));
    }

    return NextResponse.json({
      success: true,
      message: `Summary sent to ${successful} recipient(s)${failed > 0 ? `, ${failed} failed` : ''}`,
      recipients: emailList,
      successful,
      failed
    });

  } catch (error) {
    console.error('Email sending error:', error);
    return NextResponse.json(
      { 
        error: 'Failed to send email',
        details: error.message 
      },
      { status: 500 }
    );
  }
}
